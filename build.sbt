import sbt._
import CommonSettings._

lazy val root = project.in(file("."))
  .enablePlugins(PlayScala)
  .settings(aggregateReverseRoutes := Seq(common, serviceA, serviceB))
  .settings(commonSettings:_*)
  .settings(webAppSettings:_*)
  .dependsOn(serviceA)
  .aggregate(serviceA)

lazy val common: Project = project.in(file("modules/common"))
  .enablePlugins(PlayScala)
  .settings(aggregateReverseRoutes := Seq(serviceA, serviceB))
  .settings(commonSettings:_*)
  .settings(playSubProjectSettings:_*)
  .settings(webAppSettings:_*)

lazy val nonPlay: Project = project.in(file("modules/nonPlay"))
  .settings(commonSettings:_*)
  .settings(nonPlaySubProjectSettings:_*)
  .dependsOn(common)
  .aggregate(common)

lazy val serviceA: Project = project.in(file("modules/serviceA"))
  .enablePlugins(PlayScala)
  .settings(aggregateReverseRoutes := Seq(common, serviceB))
  .settings(commonSettings:_*)
  .settings(playSubProjectSettings:_*)
  .settings(webAppSettings:_*)
  .dependsOn(serviceB)
  .aggregate(serviceB)

lazy val serviceB: Project = project.in(file("modules/serviceB"))
  .enablePlugins(PlayScala)
  .settings(aggregateReverseRoutes := Seq(common, serviceA))
  .settings(commonSettings:_*)
  .settings(playSubProjectSettings:_*)
  .settings(webAppSettings:_*)
  .dependsOn(nonPlay)
  .aggregate(nonPlay)
